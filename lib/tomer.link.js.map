{"version":3,"file":"tomer.link.js","sources":["../node_modules/.pnpm/registry.npmjs.org/babel-plugin-transform-async-to-promises/0.8.15/node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/phrase/random.js","../src/phrase/adjectives.js","../src/phrase/animals.js","../src/error.js","../src/paths.js","../src/validation.js","../src/redirects.js","../src/phrase/index.js","../src/git.js","../src/index.js"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import randomNumber from 'random-number-csprng'\n\nconst random = async (values) =>\n  values[await randomNumber(0, values.length - 1)]\n\nexport default random\n","import memoize from 'mem'\nimport { readJson } from 'fs-extra'\n\nexport const readAdjectives = memoize(() => readJson(`${process.cwd()}/data/adjectives.json`))\n","import memoize from 'mem'\nimport { readJson } from 'fs-extra'\n\nexport const readAnimals = memoize(() => readJson(`${process.cwd()}/data/animals.json`))\n","const error = message => {\n  throw new Error(`Error: ${message}`)\n}\n\nexport default error\n","import memoize from 'mem'\nimport pkgUp from 'pkg-up'\nimport path from 'path'\n\nexport const packagePath = memoize(pkgUp)\n\nexport const projectPath = memoize(async () =>\n  path.dirname(await packagePath())\n)\n\nexport const redirectsPath = memoize(async () =>\n  path.join(await projectPath(), `_redirects`)\n)\n","import { URL } from 'url'\n\nexport const isSimplePath = string => {\n  if (string.endsWith(`/*`)) {\n    string = string.substring(0, string.length - 2)\n  }\n    \n  if (string.lastIndexOf('/') !== 0) {\n    return false\n  }\n\n  try {\n    const url = new URL(string, `https://example.com`)\n    return (\n      [`username`, `password`, `port`, `search`, `hash`].every(\n        field => url[field].length === 0\n      ) && url.pathname.length > 1\n    )\n  } catch (e) {\n    return false\n  }\n}\n\nexport const isURL = string => {\n  try {\n    new URL(string)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nexport const isRedirect = string => {\n  const parts = string.split(/\\s+/g)\n\n  if (parts.length !== 2) {\n    return false\n  }\n\n  const [from, to] = parts\n\n  return isSimplePath(from) && isURL(to)\n}\n","import memoize from 'mem'\nimport { readFile, outputFile } from 'fs-extra'\nimport binarySearch from 'binary-search'\nimport error from './error'\nimport { redirectsPath } from './paths'\nimport { isRedirect } from './validation'\n\nexport const readRedirects = memoize(async () => {\n  const contents = (await readFile(await redirectsPath())).toString()\n  let lines = contents.split(`\\n`).map(line => line.trim())\n\n  // Don't modify lines after empty line\n  const emptyLineIndex = lines.findIndex(line => line.length === 0)\n  let extra = ``\n\n  if (emptyLineIndex !== -1) {\n    extra = lines\n      .slice(emptyLineIndex)\n      .join(`\\n`)\n      .trim()\n    lines = lines.slice(0, emptyLineIndex)\n  }\n\n  return {\n    rules: lines.map(line => {\n      if (!isRedirect(line)) {\n        error(\n          `A \\`_redirects\\` file redirect must consist of a path, whitespace, and URL, in that order, but got '${line}'.`\n        )\n      }\n\n      const [from, to] = line.split(/\\s+/g)\n      return { from, to }\n    }),\n    extra\n  }\n})\n\nexport const outputRedirects = async ({ rules, extra }) => {\n  const longestLength = Math.max(\n    ...rules.map(({ from, to }) => `${from}  ${to}`.length)\n  )\n  const ruleContents = rules\n    .map(\n      ({ from, to }) =>\n        `${from}${` `.repeat(longestLength - from.length - to.length)}${to}`\n    )\n    .join(`\\n`)\n  const contents = `${ruleContents}\\n\\n${extra}`\n\n  await outputFile(await redirectsPath(), contents)\n}\n\nconst ruleSearch = ({ rules, path }) =>\n  binarySearch(rules, { from: path }, ({ from }, { from: needle }) =>\n    from.localeCompare(needle)\n  )\n\nexport const ruleExists = ({ rules, path }) => ruleSearch({ rules, path }) >= 0\n\nexport const insertRule = ({ rules, rule }) => {\n  const pseudoIndex = ruleSearch({ rules, path: rule.from })\n  const index = -pseudoIndex - 1\n  rules.splice(index, 0, rule)\n}\n","import random from './random'\nimport { readAdjectives } from './adjectives'\nimport { readAnimals } from './animals'\nimport { readRedirects, ruleExists } from '../redirects'\n\nexport const randomPhrase = async () => {\n  const [adjective, animal] = await Promise.all(\n    [readAdjectives, readAnimals].map(async (read) => random(await read()))\n  )\n\n  return `${adjective}-${animal}`\n}\n\nexport const randomUniquePhrase = async () => {\n  const { rules } = await readRedirects()\n  let phrase\n\n  do {\n    phrase = await randomPhrase()\n  } while (ruleExists({ rules, path: `/${phrase}` }))\n\n  return phrase\n}\n","import exec from 'execa'\n\nconst git = (...args) => exec(`git`, args)\n\nexport const pull = () => git(`pull`)\n\nexport const commit = message => git(`commit`, `-am`, message)\n\nexport const push = () => git(`push`)\n","import clipboard from 'clipboardy'\nimport { randomUniquePhrase } from './phrase'\nimport {\n  insertRule,\n  outputRedirects,\n  readRedirects,\n  ruleExists\n} from './redirects'\nimport { isSimplePath, isURL } from './validation'\nimport * as git from './git'\nimport error from './error'\n\nconst input = async () => {\n  let [, , url, path] = process.argv.map(arg => arg.trim())\n\n  if (url == null) {\n    error(`usage: short <url> [path]`)\n  }\n\n  if (!isURL(url)) {\n    error(`expected a URL, but got '${url}'.`)\n  }\n\n  const { rules } = await readRedirects()\n\n  if (path == null) {\n    path = `/${await randomUniquePhrase()}`\n  } else {\n    if (!path.startsWith(`/`)) {\n      path = `/${path}`\n    }\n\n    if (!isSimplePath(path)) {\n      error(`expected a path, but got '${path}'.`)\n    }\n\n    if (ruleExists({ rules, path })) {\n      error(`'${path}' already exists in the redirects file.`)\n    }\n  }\n\n  return { from: path, to: url }\n}\n\nconst main = async () => {\n  const rule = await input()\n\n  const link = `https://tomer.link${rule.from}`\n  console.log(`Creating redirect from ${link} to ${rule.to}.`)\n  console.log()\n\n  process.stdout.write(`Running \\`git pull\\`...`)\n  await git.pull()\n  console.log(` Done.`)\n\n  process.stdout.write(`Writing redirect to  \\`_redirects\\` file...`)\n  const { rules, extra } = await readRedirects()\n  insertRule({ rules, rule })\n  await outputRedirects({ rules, extra })\n  console.log(` Done.`)\n\n  const message = `feat: ${link} -> ${rule.to}`\n  process.stdout.write(`Running \\`git commit -am '${message}'\\`...`)\n  await git.commit(message)\n  console.log(` Done.`)\n\n  process.stdout.write(`Running \\`git push\\`...`)\n  await git.push()\n  console.log(` Done.`)\n\n  await clipboard.write(link)\n  console.log(`Copied '${link}' to clipboard.`)\n}\n\nconst tryMain = async () => {\n  try {\n    await main()\n  } catch (e) {\n    console.error(e.message)\n    process.exit(1)\n  }\n}\n\ntryMain()\n"],"names":["const","random","values","randomNumber","length","readAdjectives","memoize","readJson","process","cwd","readAnimals","error","message","Error","packagePath","pkgUp","projectPath","path","dirname","redirectsPath","join","isSimplePath","string","endsWith","substring","lastIndexOf","url","URL","every","field","pathname","e","isURL","isRedirect","parts","split","from","to","readRedirects","readFile","contents","toString","lines","map","line","trim","emptyLineIndex","findIndex","extra","slice","rules","outputRedirects","longestLength","Math","max","ruleContents","repeat","outputFile","ruleSearch","binarySearch","needle","localeCompare","ruleExists","insertRule","rule","pseudoIndex","index","splice","randomPhrase","Promise","all","read","animal","adjective","randomUniquePhrase","phrase","git","exec","args","pull","commit","push","input","argv","arg","startsWith","main","link","console","log","stdout","write","clipboard","tryMain","exit"],"mappings":"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"}